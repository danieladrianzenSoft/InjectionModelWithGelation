function [e,u,p,v,dvdr,rc] = continuumMechanics(r,t,params,variableParam)    %%     % continuumMechanics takes in r, t and the params and calculates all    % relevant CM outputs, includin dilatation, solid displacement,    % pressure, velocity, velocity gradient and radius of the cavity    %%    variableParamArray = params(variableParam);    lengthVariableParam = length(variableParamArray{1});    e = cell(lengthVariableParam,1); % dilatation    u = cell(lengthVariableParam,1); % solid displacement    p = cell(lengthVariableParam,1); % pressure    v = cell(lengthVariableParam,1); % fluid velocity    dvdr = cell(lengthVariableParam,1); % fluid velocity gradient    rc = cell(lengthVariableParam,1); % cavity radius    for iter = 1:lengthVariableParam        paramsIterValues = getParamValues(params,variableParam,iter);        paramsIter = dictionary(params.keys,paramsIterValues');        if length(t) > 1            t_injection = t{iter};        else            t_injection = t{1};        end        mu = paramsIter("mu");        lambda = paramsIter("lambda");        r0 = paramsIter("r0");        ep = zeros(length(r),length(t_injection));        up = zeros(length(r),length(t_injection));        vp = zeros(length(r),length(t_injection));        dvdrp = zeros(length(r),length(t_injection));        pp = zeros(length(r),length(t_injection));        fprintf('Continuum Mechanics: %d\n',iter)        tic        for ri = 1:length(r)            % transform laplace solution to time domain using inverseLaplace function             ep(ri,2:end) = inverseLaplace(@(s) getDilatationLaplace(s,r(ri),paramsIter), t_injection(2:end));            up(ri,2:end) = inverseLaplace(@(s) getDisplacementLaplace(s,r(ri),paramsIter), t_injection(2:end));            vp(ri,2:end) = inverseLaplace(@(s) getVelocityLaplace(s,r(ri),ep(ri,:),paramsIter), t_injection(2:end));            dvdrp(ri,2:end) = inverseLaplace(@(s) getVelocityGradLaplace(s,r(ri),ep(ri,:),paramsIter), t_injection(2:end));            % e            ep(ri,1) = 0;            ep_nan = isnan(ep(ri,:));            er_interp = interp1(t_injection(~ep_nan),ep(ri,~ep_nan),t_injection(ep_nan),'spline','extrap');            ep(ri,ep_nan) = er_interp;            % u            up(ri,1) = 0;            up_nan = isnan(up(ri,:));            ur_interp = interp1(t_injection(~up_nan),up(ri,~up_nan),t_injection(up_nan),'spline','extrap');            up(ri,up_nan) = ur_interp;            % v            vp(ri,1) = 0;            vp_nan = isnan(vp(ri,:));            vr_interp = interp1(t_injection(~vp_nan),vp(ri,~vp_nan),t_injection(vp_nan),'spline','extrap');            vp(ri,vp_nan) = vr_interp;            % dvdr            dvdrp(ri,1) = 0;            dvdrp_nan = isnan(dvdrp(ri,:));            dvdrp_interp = interp1(t_injection(~dvdrp_nan),dvdrp(ri,~dvdrp_nan),t_injection(dvdrp_nan),'spline','extrap');            dvdrp(ri,dvdrp_nan) = dvdrp_interp;            if length(mu) > 1 && length(lambda) == 1                pp(ri,:) = ep(ri,:)*(lambda+2*mu(iter));            elseif length(mu) == 1 && length(lambda) > 1                pp(ri,:) = ep(ri,:)*(lambda(iter)+2*mu);            else                pp(ri,:) = ep(ri,:)*(lambda+2*mu);            end        end        toc        e{iter} = ep;        u{iter} = up;        p{iter} = pp;        v{iter} = vp;        dvdr{iter} = dvdrp;        rc{iter} = r0 + up(1,:); %rc is first spatial point of solid displacement field    endend